import mqtt = require('mqtt');
import MqttEmitter = require('mqtt-emitter');
import { Subscription } from './Subscription';
import { ThingOptions } from './thingOptions';
import { Binding } from './binding';
/**
 * Thing class
 */
export declare class Thing {
    /**
     * Member Variables
     */
    id: string;
    username: string;
    mqttClient: mqtt.Client;
    mqttEmitter: MqttEmitter;
    /**
     * Constructor
     */
    constructor(thingId: string, options?: ThingOptions);
    /**
     * Function for initialize thing's ID, Username, and MQTT Client
     */
    private initialize(thingId, options);
    /**
     * Function for handle default topics
     */
    private setDefaultListener();
    /**
     * Function same with 'this.mqttClient.on'
     *
     * @return Thing
     */
    on(event: string, listener: Function): Thing;
    /**
     * Function for MQTT subscription a publication
     *
     * @param {string} publishName - what this thing is subscribing
     * @param {...object} [optionsOrCallback] - options for subscribing or callback
     * @param {function} [callback] - callback
     * @return Thing.Subscription
     * @example subscribeTopic('mPublishName');
     * @example subscribeTopic('mPublishName', { event: 'added' });
     */
    subscribe(name: string, ...args: any[]): Subscription;
    private twoPhaseSubscribe(name, params, callback?);
    private mqttSubscribe(name, callback?);
    /**
     * Function for DDMQ Subscription
     *
     * @param {string} publishName - what this thing is subscribing
     * @param {object} [options] - options for subscribing
     * @param {function} [callback] - callback
     * @return void
     * @example DDMQSubscribeTopic('mPublishName');
     * @example DDMQSubscribeTopic('mPublishName', { event: 'added' });
     */
    private ddmqSubscribe(name, params, callback?);
    /**
     * Function to MQTT unsubscribe
     *
     * @param {string} publishName - what this thing is unsubscribing
     * @param {function} [callback] - callback
     * @return void
     */
    unsubscribe(name: string, callback?: Function): void;
    /**
     * Method Call
     * (MeteMQ Remote Procedure Call)
     *
     * @param {string} method
     * @param {...object} [optionsOrCallback] - options for method or callback
     * @return
     */
    call(method: any, ...args: any[]): void;
    /**
     * 4-Way data binding
     *
     * @param {string} field
     * @param {object} value
     * @param {function} [callback]
     * @return Thing
     */
    bind(field: string, updateFunction?: Function): Binding;
}
