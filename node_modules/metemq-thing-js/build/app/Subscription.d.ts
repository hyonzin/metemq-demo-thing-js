import { Thing } from './Thing';
/**
 * Options for MQTT subscription for a topic
 */
export interface SubscribeTopicOptions {
    collection?: string;
    documentId?: string;
    field?: string;
    event?: string;
    payload?: string;
}
/**
 * Class for DDMQ Subscription
 *
 * member methods:
 *   onadded (func :Function)
 *   onchanged (func :Function)
 *   onremoved (func :Function)
 *   onEvent (ev :string, func :Function)
 */
export declare class Subscription {
    private thing;
    private publishName;
    constructor(thing: Thing, publishName: string);
    /**
     * Listener for Added event
     * @param {Function} func
     * @return Subscription
     */
    onAdded(func: Function): Subscription;
    /**
     * Listener for Changed event
     * @param {Function} func
     * @return Subscription
     */
    onChanged(func: Function): Subscription;
    /**
     * Listener for Removed event
     * @param {Function} func
     * @return Subscription
     */
    onRemoved(func: Function): Subscription;
    on(handlers: {
        added?: Function;
        changed?: Function;
        removed?: Function;
    }): Subscription;
    /**
     * Listener for Added event
     * @param {string} ev
     * @param {Function} func
     * @return Subscription
     */
    onEvent(ev: string, func: Function): Subscription;
    /**
     * Listener for ANY event
     * @param {Function} function
     * @return Subscription
     */
    onAny(func: Function): Subscription;
}
