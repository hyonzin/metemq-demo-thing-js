{
  "name": "mqtt-store",
  "version": "1.0.4",
  "description": "Store and retrieve data using MQTT keypaths",
  "main": "index.js",
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/RangerMauve/mqtt-store.git"
  },
  "keywords": [
    "mqtt",
    "store",
    "key",
    "value",
    "map",
    "tree"
  ],
  "author": {
    "name": "rangermauve"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/RangerMauve/mqtt-store/issues"
  },
  "homepage": "https://github.com/RangerMauve/mqtt-store",
  "devDependencies": {
    "tape": "^4.5.1"
  },
  "readme": "# mqtt-store\r\nStore and retrieve data using MQTT keypaths. You can set values, then query for values that match a wildcard. Or set values with wildcards and find all wildcards that match a simple topic.\r\n\r\n```\r\nnpm install mqtt-store --save\r\n```\r\n\r\n## Example:\r\n\r\n```javascript\r\nvar MQTTStore = require(\"mqtt-store\");\r\n\r\nvar store = new MQTTStore();\r\n\r\nstore.set(\"hello/world\", \"Greetings\");\r\nstore.get(\"hello/world\"); // #=> \"Greetings\"\r\n\r\nstore.set(\"foo/bar/baz\", \"woot\");\r\nstore.set(\"foo/bar\", \"woot wooo\");\r\nstore.query(\"foo/#\"); // #=> [\"woot\", \"woot woo\"]\r\n\r\nstore.set(\"fizz/#\", \"lolwat\");\r\nstore.set(\"fizz/buzz/+\", \"neat\");\r\nstore.match(\"fizz/buzz/quix\"); // #=> [\"lolwat\", \"neat\"]\r\n```\r\n\r\n## API\r\n### `MQTTStore()`\r\nThere is no configuration for the store currently, can be called either with `new` or just as a function.\r\n\r\n### `MQTTStore#set(topic, value)`\r\nSets a value in the store. In the background the topic will get split up into a path and will build up a tree. Set a key to `undefined` to essentially \"unset\" it. Topics with wildcards get set as through the wildcard was a literal key.\r\n\r\n### `MQTTStore#get(topic)`\r\nGets a single value from the store that was set at the given topic. If nothing was set at this topic, then `undefiend` is returned.\r\n\r\n### `MQTTStore#query(topic)`\r\nTakes a topic with wildcards and returns all values that match that topic. Returns an array of values.\r\n\r\n### `MQTTStore#match(topic)`\r\nTakes a topic without wildcards and returns all values (that might contain wildcards) that match against that topic. Returns an array of values.\r\n",
  "readmeFilename": "README.md",
  "_id": "mqtt-store@1.0.4",
  "_shasum": "21a3b2fb4039e1c6bf39d409535b32b3661a53b2",
  "_resolved": "https://registry.npmjs.org/mqtt-store/-/mqtt-store-1.0.4.tgz",
  "_from": "mqtt-store@>=1.0.2 <2.0.0"
}
